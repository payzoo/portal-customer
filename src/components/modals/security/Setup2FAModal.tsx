
import { useState } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Shield, ChevronLeft, Smartphone, Key, Check, Copy } from "lucide-react";

interface Setup2FAModalProps {
  isOpen: boolean;
  onClose: () => void;
  onBack: () => void;
}

type SetupStep = 'intro' | 'qr-code' | 'verify';

export function Setup2FAModal({ isOpen, onClose, onBack }: Setup2FAModalProps) {
  const [currentStep, setCurrentStep] = useState<SetupStep>('intro');
  const [verificationCode, setVerificationCode] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [is2FAEnabled] = useState(false); // This would come from user state

  const secretKey = "JBSWY3DPEHPK3PXP"; // This would be generated by the backend

  const handleSetup2FA = () => {
    setCurrentStep('qr-code');
  };

  const handleVerify = async () => {
    if (verificationCode.length !== 6) return;
    
    setIsLoading(true);
    // Simuler l'API call
    setTimeout(() => {
      console.log("2FA configuré avec succès");
      setIsLoading(false);
      onClose();
    }, 2000);
  };

  const handleDisable2FA = async () => {
    setIsLoading(true);
    // Simuler l'API call
    setTimeout(() => {
      console.log("2FA désactivé");
      setIsLoading(false);
      onClose();
    }, 2000);
  };

  const copySecretKey = () => {
    navigator.clipboard.writeText(secretKey);
    console.log("Clé secrète copiée");
  };

  if (currentStep === 'qr-code') {
    return (
      <Dialog open={isOpen} onOpenChange={onClose}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Button
                variant="ghost"
                size="icon"
                onClick={() => setCurrentStep('intro')}
                className="w-8 h-8"
              >
                <ChevronLeft className="w-4 h-4" />
              </Button>
              <div className="w-8 h-8 bg-black rounded-lg flex items-center justify-center">
                <Shield className="w-4 h-4 text-white" />
              </div>
              Scanner le code QR
            </DialogTitle>
          </DialogHeader>
          
          <div className="space-y-4 pt-4">
            <div className="text-center">
              <div className="w-48 h-48 bg-gray-100 rounded-lg mx-auto flex items-center justify-center mb-4">
                <p className="text-sm text-gray-500">Code QR<br />à scanner</p>
              </div>
              <p className="text-sm text-muted-foreground mb-4">
                Scannez ce code QR avec votre application d'authentification
              </p>
            </div>

            <div className="space-y-2">
              <Label>Ou entrez cette clé manuellement :</Label>
              <div className="flex items-center gap-2">
                <Input
                  value={secretKey}
                  readOnly
                  className="font-mono text-sm"
                />
                <Button
                  variant="outline"
                  size="icon"
                  onClick={copySecretKey}
                  className="w-10 h-10"
                >
                  <Copy className="w-4 h-4" />
                </Button>
              </div>
            </div>

            <Button 
              onClick={() => setCurrentStep('verify')} 
              className="w-full h-10 bg-black hover:bg-black/90 text-white"
            >
              J'ai configuré l'application
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    );
  }

  if (currentStep === 'verify') {
    return (
      <Dialog open={isOpen} onOpenChange={onClose}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Button
                variant="ghost"
                size="icon"
                onClick={() => setCurrentStep('qr-code')}
                className="w-8 h-8"
              >
                <ChevronLeft className="w-4 h-4" />
              </Button>
              <div className="w-8 h-8 bg-black rounded-lg flex items-center justify-center">
                <Key className="w-4 h-4 text-white" />
              </div>
              Vérifier le code
            </DialogTitle>
          </DialogHeader>
          
          <div className="space-y-4 pt-4">
            <div className="space-y-2">
              <Label htmlFor="verification-code">Code de vérification</Label>
              <Input
                id="verification-code"
                value={verificationCode}
                onChange={(e) => setVerificationCode(e.target.value.replace(/\D/g, '').slice(0, 6))}
                placeholder="123456"
                className="text-center text-lg tracking-widest font-mono"
                maxLength={6}
              />
              <p className="text-sm text-muted-foreground">
                Entrez le code à 6 chiffres de votre application d'authentification
              </p>
            </div>

            <div className="flex gap-3 pt-6">
              <Button 
                variant="outline" 
                onClick={() => setCurrentStep('qr-code')} 
                className="flex-1 h-10"
                disabled={isLoading}
              >
                Retour
              </Button>
              <Button 
                onClick={handleVerify} 
                className="flex-1 h-10 bg-black hover:bg-black/90 text-white"
                disabled={verificationCode.length !== 6 || isLoading}
              >
                {isLoading ? (
                  "Vérification..."
                ) : (
                  <>
                    <Check className="w-4 h-4 mr-2" />
                    Activer 2FA
                  </>
                )}
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    );
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Button
              variant="ghost"
              size="icon"
              onClick={onBack}
              className="w-8 h-8"
            >
              <ChevronLeft className="w-4 h-4" />
            </Button>
            <div className="w-8 h-8 bg-black rounded-lg flex items-center justify-center">
              <Shield className="w-4 h-4 text-white" />
            </div>
            Authentification 2FA
          </DialogTitle>
        </DialogHeader>
        
        <div className="space-y-4 pt-4">
          <div className="text-center p-6 bg-gray-50 rounded-lg">
            <Smartphone className="w-12 h-12 mx-auto mb-3 text-gray-600" />
            <h3 className="font-medium mb-2">
              {is2FAEnabled ? "2FA activée" : "Sécurisez votre compte"}
            </h3>
            <p className="text-sm text-muted-foreground">
              {is2FAEnabled 
                ? "Votre authentification à deux facteurs est active et protège votre compte."
                : "L'authentification à deux facteurs ajoute une couche de sécurité supplémentaire à votre compte."
              }
            </p>
          </div>

          {is2FAEnabled ? (
            <div className="space-y-3">
              <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
                <div className="flex items-center gap-2">
                  <Check className="w-4 h-4 text-green-600" />
                  <span className="text-sm font-medium text-green-800">2FA activée</span>
                </div>
              </div>
              
              <Button 
                onClick={handleDisable2FA} 
                variant="outline"
                className="w-full h-10"
                disabled={isLoading}
              >
                {isLoading ? "Désactivation..." : "Désactiver 2FA"}
              </Button>
            </div>
          ) : (
            <Button 
              onClick={handleSetup2FA} 
              className="w-full h-10 bg-black hover:bg-black/90 text-white"
            >
              <Shield className="w-4 h-4 mr-2" />
              Configurer 2FA
            </Button>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}
